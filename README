# $Id$

MySQL for NSS systems
=====================
Please read the file INSTALL for generic installation details.

NOTE: Solaris 9 is not fully unsupported.  Sun's PAM modules have become
      so restrictive that you can't even properly authenticate via PAM
      anymore if there's a "mysql" in /etc/nsswitch.conf.  System routines
      like getpwnam will still work, so you can work around it some by
      compiling your apps with PAM turned *off* - however logging in via
      system programs such as telnet will fail.  I'll be addressing this
      when I can; unfortunately it requires a PAM module that I'd need to
      write.  It's on my TODO list ...

Prerequisites
=============
    GCC
    GNU Make
    MySQL client library & header files

Only GCC is supported at this time.  Sun Workshop's CC may work, but I do
not have the resources to test it.

32-bit & 64-bit Support
=======================
For 32-bit programs to work, you must produce a 32-bit library.  For any
Intel platform, this is a non-issue - skip this section.
For Solaris on Sparc, you need to be more careful. Most programs in
Solaris (7, 8, and 9) are still 32-bit.  Since we're also linking against
MySQL, your MySQL library must also be 32-bit.  You *can* build a 64-bit
library if you do a couple of things.  First, get a 32-bit library installed
and working.  Then:
    Build a 64-bit MySQL library and install it in a DIFFERENT place than
        your 32-bit MySQL library
    Build a 64-bit libnss-mysql by re-running 'configure' with the appropriate
        CPPFLAGS settings in your environment (for gcc, "-m64") and pointing
        it at your 64-bit MySQL library (using --with-mysql-lib=...) and
        edit the resulting Makefile:
            Change 'libdir' to be '/usr/lib/sparcv9'
        Now compile and install, and you should now have 64-bit support.
    Test it by using programs such as 'ls' and 'ps' from the /usr/bin/sparcv9
    directory.

At some point in the future, 64-bit support will be integrated.

Please also note that the MySQL folks don't yet support 64-bit; my limited
testing, however, has shown that at least the client libraries seem to
work OK.
    
For the impatient
=================
    ./configure
    make
    make install

    Edit /etc/nss_mysql.cfg and /etc/nss_mysql_root.cfg.  Pay special
    attention to the socket location.  The default may not work in your
    environment!
    Edit /etc/nsswitch.conf and add 'mysql' to passwd/shadow/group
    The default configs will work well with the sample sql database in
    sample/sample_database.sql.  Read that file for more details on the
    sample database.

    On systems with older or nonstandard MySQL installations, you may
    need to use the --with-mysql-lib and/or --with-mysql-inc options.

    You may use a section called [libnss_mysql] in your 'my.cnf' file to
    specify various options.  Options that should work:
        compress
        debug
        init-command
        user
        password

Debugging
=========
    See the file DEBUGGING

Solaris support
===============
    libnss-mysql appears to work fine under the Solaris' I've tested (see
    below). I plan to fully support Solaris as the library matures.  As
    it stands now, it should work for most people.  If it doesn't,
    *please* let me know so I can make sure to investigate.

Tested with
===========
    Corel (1.2 - Debian 2.1) and MySQL 3.21.33b
    RedHat 6.1 and MySQL 3.20.??
    RedHat 7.1 and MySQL 3.23.49a
    RedHat 7.2 and MySQL 3.23.49a
    RedHat 7.3 and MySQL 3.23.49a & 3.23.52

    Solaris 9/sparc, MySQL 3.23.52, gcc 3.1 NOTE: PAM programs will fail
    Solaris 8/x86, MySQL 3.23.52, gcc 3.1
    Solaris 8/sparc, MySQL 3.23.52, gcc 2.95.3, 3.0.2 (32 & 64-bit), 3.2
    Solaris 7/sparc, MySQL 3.23.53 (binary distribution), gcc 2.95.2
    Solaris 6/sparc, MySQL 3.23.39, gcc 2.95.2


