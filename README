# $Id$

MySQL for NSS systems
=====================
Please read the file INSTALL for generic installation details.

NOTE: Solaris 9 is currently unsupported.  Sun changed something in the
      API that's preventing the library from properly functioning.  Fixing
      this is on my TODO list ...

Prerequisites
=============
	GCC
	GNU Make
	MySQL client library & header files

Only GCC is supported at this time.  Sun Workshop's CC may work, but I do
not have the resources to test it.

32-bit & 64-bit Support
=======================
For 32-bit programs to work, you must produce a 32-bit library.  For any
Intel platform, this is a non-issue - skip this section.
For Solaris on Sparc, you need to be more careful. Most programs in
Solaris (7, 8, and 9) are still 32-bit.  Since we're also linking against
MySQL, your MySQL library must also be 32-bit.  You *can* build a 64-bit
library if you do a couple of things.  First, get a 32-bit library installed
and working.  Then:
    Build a 64-bit MySQL library and install it in a DIFFERENT place than
        your 32-bit MySQL library
    Build a 64-bit libnss-mysql by re-running 'configure' and pointing
        it at your 64-bit MySQL library (using --with-mysql-lib=...) and
        edit the resulting Makefile:
            Change 'libdir' to be '/usr/lib/sparcv9'
            Change '-m32' to be '-m64' (GCC; if not GCC, you're on your own)
        Now compile and install, and you should now have 64-bit support.
    Test it by using programs such as 'ls' and 'ps' from the /usr/bin/sparcv9
    directory.

At some point in the future, 64-bit support will be integrated.

Please also note that the MySQL folks don't yet support 64-bit; my limited
testing, however, has shown that at least the client libraries seem to
work OK.
    
For the impatient
=================
    ./configure
	make
	make install

    Edit /etc/nss_mysql.cfg and /etc/nss_mysql_root.cfg.  Pay special
    attention to the socket location.  The default may not work in your
    environment!
    Edit /etc/nsswitch.conf and add 'mysql' to passwd/shadow/group
    The default configs will work well with the sample sql database in
    sample/sample_database.sql.  Read that file for more details on the
    sample database.

    On systems with older or nonstandard MySQL installations, you may
    need to use the --with-mysql-lib and/or --with-mysql-inc options.

    You may use a section called [libnss_mysql] in your 'my.cnf' file to
    specify various options.  Options that should work:
        compress
        debug
        init-command
        user
        password

Debugging
=========
    Serious problems will sent to syslog, so check there first.

    Set the config option 'priority' (in the [global] section) to debug.
    Since there are a LOT of debugging messages, you can pick which type(s)
    you want.  Set the config option 'debug_flags' to be the sum of the
    options below that you want:

    MEMORY (malloc, free, etc)          1
    FUNCTION (enter/exit w/ status)     2
    CONNECT (MySQL connect/disconnect)  4
    QUERY (MySQL queries)               8 
    PARSE (File & query result parsing) 16
    FILE (File opening/closing)         32

    For example, if you want all options, set 'debug_flags' to 63
    If you want just CONNECT, set it to 4.  If you want CONNECT
    and QUERY, set it to 12.

    Since there's a period of time where the library has not yet
    loaded your config, the library defaults to logging to
    auth.alert until the config is loaded and the defaults are
    overridden.  If you're not getting ANY messages, it is possible
    that the error is before the config is loaded.  You *should*
    have an error message wherever your auth.alert messages go.
    If you do not, I recommend doing a quick trace ('strace' on Linux,
    'truss' on Solaris) of a quick command such as 'id' and looking for
    whether the library even gets loaded, if the library tries to open your
    config file, etc ...  Just 'strace id username-in-sql' (or
    'truss id username-in-sql') should do the trick.
    You could also edit nss_mysql.h, change DEF_PRIO to LOG_DEBUG,
    change DEF_DFLAGS to D_ALL, recompile & reinstall.  If that doesn't
    help, the library is probably not being loaded; make sure you've added
    'mysql' to /etc/nsswitch.conf.  Please also note that daemons, including
    nscd, will not see changes to nsswitch.conf unless they're restarted.
    I recommend shutting off nscd until you've debugged your libnss-mysql
    installation.

Solaris support
===============
    libnss-mysql appears to work fine under the Solaris' I've tested (see
    below). I plan to fully support Solaris as the library matures.  As
    it stands now, it should work for most people.  If it doesn't,
    *please* let me know so I can make sure to investigate.

Tested with
===========
    Corel (1.2 - Debian 2.1) and MySQL 3.21.33b
    RedHat 6.1 and MySQL 3.20.something
    RedHat 7.1 and MySQL 3.23.49a
    RedHat 7.2 and MySQL 3.23.49a
    RedHat 7.3 and MySQL 3.23.49a & 3.23.52

    Solaris 8/x86, MySQL 3.23.52, gcc 3.1
    Solaris 8/sparc, MySQL 3.23.52, gcc 2.95.3, 3.0.2 (32 & 64-bit), 3.2
    Solaris 6/sparc, MySQL 3.23.39, gcc 2.95.2


